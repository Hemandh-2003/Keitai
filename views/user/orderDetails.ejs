<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Order Details</title>
  <link rel="stylesheet" href="/css/order-details.css" />
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" />
</head>

<body>
  <% const couponApplied=Boolean(order.coupon) || (order.couponDiscount && order.couponDiscount> 0); %>
    <div class="order-container" data-coupon-applied="<%= couponApplied %>">
      <header class="order-header">
        <button class="back-btn" onclick="goBack()"><i class="fas fa-arrow-left"></i></button>
        <h1>Order Details</h1>
      </header>

      <main class="order-content">
        <!-- Order Overview -->
        <section class="order-overview">
          <div class="order-meta">
            <div class="meta-item">
              <span class="meta-label">Order ID</span>
              <span class="meta-value">
                <%= order.orderId %>
              </span>
            </div>
            <div class="meta-item">
              <span class="meta-label">Status</span>
              <span class="meta-value status-badge">
                <% if (order.returnStatus==='Approved' ) { %>
                  Return Accepted
                  <% } else if (order.returnStatus==='Rejected' ) { %>
                    Return Rejected
                    <% } else if (order.returnStatus==='Requested' ) { %>
                      Return Requested
                      <% } else { %>
                        <%= order.status %>
                          <% } %>
              </span>
            </div>
            <div class="meta-item">
              <span class="meta-label">Order Date</span>
              <span class="meta-value">
                <%= new Date(order.createdAt).toLocaleDateString() %>
              </span>
            </div>
            <div class="meta-item">
              <span class="meta-label">Delivery Date</span>
              <span class="meta-value">
                <%= new Date(order.estimatedDelivery).toLocaleDateString() %>
              </span>
            </div>
          </div>
        </section>

        <!-- Products -->
        <section class="order-section">
          <h2 class="section-title">Products</h2>
          <div class="product-grid">
            <% (order.products || []).forEach(item=> {
              const price = item.product.salesPrice || item.product.regularPrice;
              const subtotal = price * item.quantity;

              const returnedItem = (order.returnedItems || []).find(r => r.product.toString() ===
              item.product._id.toString());
              %>
             <div class="product-card">
  <% if (item.product.images && item.product.images.length > 0) { %>
    <img src="/uploads/<%= item.product.images[0] %>" alt="Product" class="product-image" />
  <% } %>

  <div class="product-info">
    <h3 class="product-name"><%= item.product.name %></h3>

    <div class="product-meta">
      <div class="meta-row"><span>Quantity:</span> <span><%= item.quantity %></span></div>
      <div class="meta-row"><span>Price:</span> <span>₹<%= price %></span></div>
      <div class="meta-row"><span>Subtotal:</span> <span class="text-bold">₹<%= subtotal %></span></div>
    </div>

    <% if (item.status === 'Cancelled') { %>
      <!-- Cancelled product display -->
      <span class="badge bg-secondary">Cancelled</span>
      <p class="text-muted">Reason: <%= item.cancellationReason %></p>

    <% } else if (returnedItem) { %>
      <!-- Return flow -->
      <% if (returnedItem.status === 'Approved') { %>
        <span class="badge bg-success">Returned</span>
        <p class="text-muted">Reason: <%= returnedItem.reason %></p>
      <% } else if (returnedItem.status === 'Rejected') { %>
        <span class="badge bg-danger">Return Rejected</span>
        <p class="text-muted">Reason: <%= returnedItem.reason %></p>
      <% } else if (returnedItem.status === 'Pending') { %>
        <span class="badge bg-warning">Return Requested</span>
        <p class="text-muted">Reason: <%= returnedItem.reason %></p>
      <% } %>

    <% } else { %>
      <!-- Active product: allow return if delivered -->
      <% if (order.status === 'Delivered' && (order.products.length > 1 || item.quantity > 1)) { %>
        <form action="/user/orders/<%= order._id %>/return/<%= item.product._id %>"
              method="POST"
              class="action-form return-item-form"
              data-max-qty="<%= item.quantity %>">
          <input type="hidden" name="quantity" value="<%= item.quantity %>" />
          <input type="hidden" name="reason" value="Damaged" />
          <button type="submit" class="btn-return">Return Item</button>
        </form>
      <% } %>

      <!-- Allow cancel if still pending -->
      <% if (order.status === 'Pending' && (order.products.length > 1 || item.quantity > 1)) { %>
        <form action="/user/orders/cancel-item/<%= order._id %>/<%= item.product._id %>"
              method="POST"
              class="action-form cancel-item-form"
              data-max-qty="<%= item.quantity %>">
          <input type="hidden" name="quantity" value="<%= item.quantity %>" />
          <input type="hidden" name="reason" value="" />
          <button type="button" class="btn-cancel">Cancel Item</button>
        </form>
      <% } %>
    <% } %>
  </div>
</div>

              <% }) %>


          </div>
        </section>

        <!-- Shipping, Payment, Coupon, and Summary sections -->
        <div class="order-details-row">
          <section class="order-section">
            <h2 class="section-title">Shipping Details</h2>
            <div class="shipping-card">
              <div class="shipping-info">
                <p class="shipping-name">
                  <%= selectedAddress ? selectedAddress.name : 'N/A' %>
                </p>
                <p class="shipping-address">
                  <%= selectedAddress ? selectedAddress.street : 'N/A' %>, <%= selectedAddress ? selectedAddress.city
                      : 'N/A' %>
                </p>
                <p class="shipping-region">
                  <%= selectedAddress ? selectedAddress.state : 'N/A' %>, <%= selectedAddress ? selectedAddress.zip
                      : 'N/A' %>, <%= selectedAddress ? selectedAddress.country : 'N/A' %>
                </p>
                <p class="shipping-phone"><i class="fas fa-phone"></i>
                  <%= selectedAddress ? selectedAddress.phone : 'N/A' %>
                </p>
              </div>
            </div>
          </section>

          <section class="order-section">
            <h2 class="section-title">Payment Method</h2>
            <div class="payment-method">
              <i class="fas fa-credit-card"></i>
              <span>
                <%= order.paymentMethod %>
              </span>
            </div>
          </section>

          <% if (couponApplied) { %>
            <section class="order-section">
              <h2 class="section-title">Coupon Applied</h2>
              <div class="coupon-card">
                <div class="coupon-row"><span>Code:</span> <span class="coupon-code">
                    <%= order.coupon ? order.coupon.code : '—' %>
                  </span></div>
                <div class="coupon-row"><span>Type:</span> <span>
                    <%= order.coupon && order.coupon.discountType==='percentage' ? 'Percentage' : 'Fixed Amount' %>
                  </span></div>
                <div class="coupon-row"><span>Discount Applied:</span> <span class="text-bold">-₹<%=
                      (order.couponDiscount || 0).toFixed(2) %></span></div>
              </div>
            </section>
            <% } %>

              <section class="order-section">
                <h2 class="section-title">Order Summary</h2>
                <div class="summary-card">
                  <% const subTotal=order.totalAmount + (order.couponDiscount || 0); %>
                    <div class="summary-row"><span>Subtotal</span> <span>₹<%= subTotal.toFixed(2) %></span></div>
                    <% if (order.deliveryCharge && order.deliveryCharge> 0) { %>
                      <div class="summary-row"><span>Delivery Charge</span> <span>₹<%= order.deliveryCharge.toFixed(2)
                            %></span></div>
                      <% } %>
                        <% if (order.couponDiscount> 0) { %>
                          <div class="summary-row"><span>Coupon Discount</span> <span class="text-discount">-₹<%=
                                order.couponDiscount.toFixed(2) %></span></div>
                          <p class="coupon-note"><i class="fas fa-info-circle"></i> Coupon applied successfully. Terms
                            may apply.</p>
                          <% } %>
                            <div class="summary-row total-row"><span>Total Amount</span> <span class="text-bold">₹<%=
                                  order.totalAmount.toFixed(2) %></span></div>
                </div>
              </section>
        </div>

        <!-- Actions -->
        <div class="action-buttons">
          <form action="/user/order/<%= order._id %>/invoice" method="GET" target="_blank" class="action-form">
            <button type="submit" class="btn btn-primary"><i class="fas fa-file-invoice"></i> Download Invoice</button>
          </form>

          <% if (order.status==='Pending' ) { %>
            <form id="cancel-order-form" action="/user/orders/cancel/<%= order._id %>" method="POST"
              class="action-form">
              <input type="hidden" name="reason" value="" />
              <button type="button" class="btn btn-cancel" id="cancel-order-btn">Cancel Order</button>
            </form>
            <% } else if (order.status==='Delivered' ) { %>
              <form class="return-order-form action-form" action="/user/orders/return/<%= order._id %>" method="POST">
                <button type="submit" class="btn btn-return">Return Order</button>
              </form>
              <% } %>

                <% if (order.status==='Pending' && order.paymentStatus==='Failed' ) { %>
                  <form action="/payment/retry-payment" method="POST" class="action-form">
                    <input type="hidden" name="orderId" value="<%= order._id %>" />
                    <button type="submit" class="btn btn-pay"><i class="fas fa-sync-alt"></i> Retry Payment</button>
                  </form>
                  <% } %>
        </div>
      </main>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
      function goBack() {
        if (document.referrer) {
          window.history.back();
        } else {
          window.location.href = '/user/order';
        }
      }

      // Return Order Confirmation with reason
      document.querySelectorAll('.return-order-form').forEach(form => {
        form.addEventListener('submit', function (e) {
          e.preventDefault();

          // Step 1: Confirm return
          Swal.fire({
            title: 'Are you sure?',
            text: 'Do you really want to return this order?',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Yes, return it!',
            cancelButtonText: 'Cancel'
          }).then(confirmResult => {
            if (!confirmResult.isConfirmed) return;

            // Step 2: Ask for reason
            Swal.fire({
              title: 'Reason for Return',
              input: 'select',
              inputOptions: {
                'Damaged or Defective': 'Damaged or Defective',
                'Wrong Item Delivered': 'Wrong Item Delivered',
                'Not as Described': 'Not as Described',
                'Better Price Elsewhere': 'Better Price Elsewhere',
                'Other': 'Other'
              },
              inputPlaceholder: 'Select a reason',
              showCancelButton: true,
              confirmButtonText: 'Submit',
              cancelButtonText: 'Cancel'
            }).then(reasonResult => {
              if (!reasonResult.isConfirmed) return;

              if (reasonResult.value === 'Other') {
                Swal.fire({
                  title: 'Please specify your reason',
                  input: 'textarea',
                  inputPlaceholder: 'Type your reason here...',
                  showCancelButton: true,
                  confirmButtonText: 'Submit',
                  cancelButtonText: 'Cancel',
                  inputValidator: (value) => {
                    if (!value.trim()) return 'Please enter a reason';
                  }
                }).then(customReason => {
                  if (customReason.isConfirmed && customReason.value.trim() !== '') {
                    let hiddenReason = document.createElement('input');
                    hiddenReason.type = 'hidden';
                    hiddenReason.name = 'reason';
                    hiddenReason.value = customReason.value.trim();
                    form.appendChild(hiddenReason);
                    form.submit();
                  }
                });
              } else {
                let hiddenReason = document.createElement('input');
                hiddenReason.type = 'hidden';
                hiddenReason.name = 'reason';
                hiddenReason.value = reasonResult.value;
                form.appendChild(hiddenReason);
                form.submit();
              }
            });
          });
        });
      });


      // Cancel Item with reason & quantity
      document.querySelectorAll('.cancel-item-form .btn-cancel').forEach(button => {
        button.addEventListener('click', function () {
          const form = this.closest('form');
          const maxQty = parseInt(form.dataset.maxQty, 10);

          Swal.fire({
            title: 'Cancel Quantity',
            input: 'number',
            inputAttributes: { min: 1, max: maxQty },
            inputValue: maxQty,
            showCancelButton: true,
            confirmButtonText: 'Next',
            cancelButtonText: 'Cancel',
            inputValidator: (value) => {
              if (!value || value < 1 || value > maxQty) return `Enter a number between 1 and ${maxQty}`;
            }
          }).then(qtyResult => {
            if (!qtyResult.isConfirmed) return;
            form.querySelector('input[name="quantity"]').value = qtyResult.value;

            Swal.fire({
              title: 'Reason for Cancellation',
              input: 'select',
              inputOptions: {
                'Not Needed Anymore': 'Not Needed Anymore',
                'Found Cheaper Elsewhere': 'Found Cheaper Elsewhere',
                'Delivery Taking Too Long': 'Delivery Taking Too Long',
                'Wrong Item Ordered': 'Wrong Item Ordered',
                'Other': 'Other'
              },
              inputPlaceholder: 'Select a reason',
              showCancelButton: true,
              confirmButtonText: 'Submit'
            }).then(reasonResult => {
              if (!reasonResult.isConfirmed) return;
              if (reasonResult.value === 'Other') {
                Swal.fire({
                  title: 'Please specify your reason',
                  input: 'textarea',
                  inputPlaceholder: 'Type your reason here...',
                  showCancelButton: true,
                  confirmButtonText: 'Submit'
                }).then(customReason => {
                  if (customReason.isConfirmed && customReason.value.trim() !== '') {
                    form.querySelector('input[name="reason"]').value = customReason.value.trim();
                    form.submit();
                  }
                });
              } else {
                form.querySelector('input[name="reason"]').value = reasonResult.value;
                form.submit();
              }
            });
          });
        });
      });

      // Cancel Order with reason
      document.getElementById('cancel-order-btn')?.addEventListener('click', function () {
        const form = document.getElementById('cancel-order-form');

        Swal.fire({
          title: 'Are you sure?',
          text: 'Do you really want to cancel this order?',
          icon: 'warning',
          showCancelButton: true,
          confirmButtonText: 'Yes, cancel it',
          cancelButtonText: 'No, keep it'
        }).then(firstResult => {
          if (firstResult.isConfirmed) {
            Swal.fire({
              title: 'Reason for Cancellation',
              input: 'select',
              inputOptions: {
                'Not Needed Anymore': 'Not Needed Anymore',
                'Found Cheaper Elsewhere': 'Found Cheaper Elsewhere',
                'Delivery Taking Too Long': 'Delivery Taking Too Long',
                'Wrong Item Ordered': 'Wrong Item Ordered',
                'Other': 'Other'
              },
              inputPlaceholder: 'Select a reason',
              showCancelButton: true,
              confirmButtonText: 'Next',
            }).then(reasonResult => {
              if (reasonResult.isConfirmed) {
                if (reasonResult.value === 'Other') {
                  Swal.fire({
                    title: 'Please specify your reason',
                    input: 'textarea',
                    inputPlaceholder: 'Type your reason here...',
                    showCancelButton: true,
                    confirmButtonText: 'Submit'
                  }).then(customReason => {
                    if (customReason.isConfirmed && customReason.value.trim() !== '') {
                      form.querySelector('input[name="reason"]').value = customReason.value.trim();
                      form.submit();
                    }
                  });
                } else if (reasonResult.value) {
                  form.querySelector('input[name="reason"]').value = reasonResult.value;
                  form.submit();
                }
              }
            });
          }
        });
      });

      // Return item per-product reason prompt
      document.querySelectorAll('form[action*="/return/"]').forEach(form => {
        if (form.classList.contains('return-order-form')) return;

        form.addEventListener('submit', function (e) {
          e.preventDefault();

          const maxQty = parseInt(form.querySelector('input[name="maxQty"]')?.value || '1', 10);

          // Step 1: Confirm return
          Swal.fire({
            title: 'Are you sure?',
            text: 'Do you really want to return this item?',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Yes, proceed',
            cancelButtonText: 'Cancel'
          }).then(confirmResult => {
            if (!confirmResult.isConfirmed) return;

            // Step 2: Ask for quantity if more than one
            const askQuantity = maxQty > 1
              ? Swal.fire({
                title: 'Quantity to return',
                input: 'number',
                inputValue: maxQty,
                inputAttributes: { min: 1, max: maxQty },
                showCancelButton: true,
                confirmButtonText: 'Next',
                cancelButtonText: 'Cancel',
                inputValidator: (value) => {
                  const qty = parseInt(value, 10);
                  if (!qty || qty < 1 || qty > maxQty) {
                    return `Please enter a valid quantity (1 - ${maxQty})`;
                  }
                }
              })
              : Promise.resolve({ isConfirmed: true, value: 1 });

            askQuantity.then(qtyResult => {
              if (!qtyResult.isConfirmed) return;

              form.querySelector('input[name="quantity"]').value = qtyResult.value;

              // Step 3: Reason for return
              Swal.fire({
                title: 'Reason for Return',
                input: 'select',
                inputOptions: {
                  'Damaged or Defective': 'Damaged or Defective',
                  'Wrong Item Delivered': 'Wrong Item Delivered',
                  'Not as Described': 'Not as Described',
                  'Better Price Elsewhere': 'Better Price Elsewhere',
                  'Other': 'Other'
                },
                inputPlaceholder: 'Select a reason',
                showCancelButton: true,
                confirmButtonText: 'Next',
                cancelButtonText: 'Cancel'
              }).then(reasonResult => {
                if (!reasonResult.isConfirmed) return;

                if (reasonResult.value === 'Other') {
                  Swal.fire({
                    title: 'Please specify your reason',
                    input: 'textarea',
                    inputPlaceholder: 'Type your reason here...',
                    showCancelButton: true,
                    confirmButtonText: 'Submit',
                    cancelButtonText: 'Cancel',
                    inputValidator: (value) => {
                      if (!value.trim()) return 'Please enter a reason';
                    }
                  }).then(customReason => {
                    if (customReason.isConfirmed && customReason.value.trim() !== '') {
                      form.querySelector('input[name="reason"]').value = customReason.value.trim();
                      form.submit();
                    }
                  });
                } else {
                  form.querySelector('input[name="reason"]').value = reasonResult.value;
                  form.submit();
                }
              });
            });
          });
        });
      });
    </script>
</body>

</html>